---
- name: Rolling CD of Docker App with Docker Compose
  hosts: appservers
  remote_user: deploy
  become: true
  serial: 1  # Ensures that one server is updated at a time?
  vars:
    db_vars:
      MYSQL_ROOT_PASSWORD: "yes"
      MYSQL_DATABASE: "microblog"
      MYSQL_USER: "microblog"
      MYSQL_PASSWORD: "my-password"
    app_env:
      SECRET_KEY: "ca9c838c110047c0ba1a7750353886b5"
      DATABASE_URL: "mysql+pymysql://microblog:my-password@52.236.122.183/microblog"
  tasks:

    - name: Fetch tags from GitHub using uri
      uri:
        url: "https://api.github.com/repos/deadbacteria8/microblog/tags"
        return_content: true
      register: tags

    - name: Show taggggggg
      set_fact:
        version: "{{ tags.json[0].name }}"

    - name: Check if Docker Compose is installed
      command: docker-compose --version
      register: docker_compose_installed
      failed_when: false

    - name: Pull the latest version of microblog
      docker_image:
        name: "deadbacteria8/docker-prod:{{ version }}"
        source: pull

    - name: Stop and remove the old containers
      command: docker compose down
      args:
        chdir: /home/deploy
      ignore_errors: yes
      environment: "{{ app_env }}"

    - name: Remove old container
      docker_container:
        name: microblog
        state: absent

    # Do it like this and i can just not copy the entire repo and dockercompose file thank fuck
    - name: Restart container with new image
      docker_container:
        name: microblog
        image: "deadbacteria8/docker-prod:{{ version }}"
        env:
          SECRET_KEY: "ca9c838c110047c0ba1a7750353886b5"
          DATABASE_URL: "mysql+pymysql://microblog:my-password@52.236.122.183/microblog"
          HONEYBADGER: 'hbp_s4S4BoIAyqht3QpwD8ikDuHBku60Z90a6xY7'

          VERSION: "{{ version }}"
        ports: 8000:5000
        published_ports: 8000:5000
        restart_policy: always
        state: started

    - name: Wait for stuff
      wait_for:
        port: 8000
        delay: 30

    - name: Check new stuff
      uri:
        url: "http://deadbacteria8.tech/version"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: result

    - name: Show the version from the prev step
      debug:
        msg: "The version is {{ result.content }}"
